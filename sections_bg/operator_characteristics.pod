=encoding utf8

=head1 Характеристики на операторите

Z<operator_characteristics>
X<оператори; характеристики>

Всеки оператор има няколко важни характеристики, които определят
неговото поведение: броят на аргументите, върху които ще работи;
неговите отношения с други оператори; и неговите синтактични
възможности.

C<perldoc perlop> и C<perldoc perlsyn> предлагат огромно количество
информация относно операторите в Perl, но документацията предполага,
че вече сте запознати с някои детайли относно начина им на
работа. Основните идеи от компютърните науки може да звучат страшно в
началото, но след това ще видите, че ползването и разбирането им става
инстинктивно.

=head2 Приоритет

Z<precedence>
X<приоритет>

I<Приоритетът> на оператора определя кога Perl ще го обработи. Редът
на обработка започва от оператора с най-голям приоритет и завършва с
оператора с най-малък приоритет. Приоритетът на умножението е по-голям
от този на събирането, затова резултата на C<7 + 7 * 10> след
обработката ще бъде C<77>, а не C<140>.

За да накарате интерпретатора да изпълни някои оператори преди други,
трябва да оградите вътрешните изрази с кръгли скоби. В следния израз
C<(7 + 7) * 10>, ограждането на действието събиране кара
интерпретатора да извърши това действие преди умножението. Резултата е
C<140>.

C<perldoc perlop> съдържа таблица с приоритети на операторите.
Прочетете я, разберете я, но не си губете времето да я наизустявате.
По-добре използвайте прости изрази и ползвайте допълнително скоби за
да посочвате изрично намеренията си на тези, които четат кода Ви.

В случаите когато два оператора имат еднакъв приоритет, други фактори
като асоциативност (L<associativity>) и фиксираност (L<fixity>) може да
укажат влияние на реда на изпълнение на операциите.

=head2 Асоциативност

Z<associativity>
X<асоциативност>
X<асоциативност; лява>
X<лява асоциативност>
X<асоциативност; дясна>
X<дясна асоциативност>

I<Асоциативността> на оператора определя дали той ще бъде изпълнен
отляво надясно или отдясно на ляво. Събирането е с лява асоциативност,
така че C<2 + 3 + 4> ще изпълни първо C<2 + 3>, а след това ще добави
C<4> към резултата. Повдигането на степен е с дясна асоциативност и
затова в израза C<2 ** 3 ** 4> първо ще се изпълни C<3 ** 4>, а след
това C<2> ще бъде повдигнато на степен 81.

Струва си времето да се запомни приоритетът и асоциативността на често
използваните математически оператори, но винаги ползвайте кръгли скоби
за да няма обърквания.

=begin sidebar

X<C<B::Deparse>>
X<приоритет; пояснителна>
X<асоциативност; пояснителна>

Модулът C<B::Deparse>, който е част от стандартната библиотека с
модули на Perl, е незаменим инструмент за дебъгване. Стартирайте
C<perl -MO=Deparse,-p> върху парче код за да видите как точно Perl
обработва различните оператори в зависимост от техния приоритет и
асоциативност. Флагът C<-p> добавя допълнителни групиращи скоби, които
често правят редът на изпълнение по-ясен.

Не забравяйте, че оптимизаторът на Perl ще опрости математически
операции като тези в предните примери. За да избегнете това,
използвайте променливи като например C<$x ** $y ** $z>.

=end sidebar

=head2 Брой на аргументите

Z<arity>

X<Брой на аргументите>
X<оператори; Брой на аргументите>
X<нулев>
X<унарен>
X<бинарен>
X<троен>
X<списъчен>

Всеки оператор работи върху някакъв брой аргументи. I<Нулев> оператор
е този, който не приема аргументи. I<Унарен> оператор е този, който
приема само един аргумент. I<Бинарния> оператор е този, който приема
два аргумента. I<Тройния> оператор е този, който приема три
аргумента.  I<списъчен> оператор е този, който работи върху списък с
аргументи. Документацията за всеки оператор и дадените примери с него
би трябвало да покажат ясно какъв брой аргументи може да приеме.

Аритметичните оператори са бинарни оператори и обикновено са с лява асоциация.
В изразът C<2 + 3 - 4> първо се изпълнява действието събиране C<2 + 3>; събирането
и изваждането имат еднакъв приоритет, а редът на изпълнението им започва от най-левият
оператор, понеже са бинарни операции и с лява асоциация. Първо ще се изпълни най-левият
оператор с аргументи (C<2> и C<3>), а след това резултата ще участва като
аргумент към оператора C<-> и най-десния аргумент (C<4>).

Perl novices often find confusion between the interaction of listary
operators--especially function calls--and nested expressions. Where parentheses
usually help, beware of the parsing complexity of:

=begin programlisting

    # probably buggy code
    say ( 1 + 2 + 3 ) * 4;

=end programlisting

... which prints the value C<6> and (probably) evaluates as a whole to C<4>
(the return value of C<say> multiplied by C<4>). Perl's parser happily
interprets the parentheses as postcircumfix (L<fixity>) operators denoting the
arguments to C<say>, not circumfix parentheses grouping an expression to change
precedence.

=head2 Fixity

Z<fixity>
X<fixity>
X<operators; fixity>
X<infix>
X<fixity; infix>
X<prefix>
X<fixity; prefix>
X<postfix>
X<fixity; postfix>
X<circumfix>
X<fixity; circumfix>
X<postcircumfix>
X<fixity; postcircumfix>

An operator's I<fixity> is its position relative to its operands:

X<C<.>; infix operator>
X<C<.=>; infix operator>
X<C<..>; infix operator>
X<C<...>; infix operator>
X<C<=~>; infix operator>
X<C<!~>; infix operator>
X<C<|>; infix operator>
X<C<||>; infix operator>
X<C<//>; infix operator>
X<C<|=>; infix operator>
X<C<||=>; infix operator>
X<C<//=>; infix operator>

=over 4

=item * I<Infix> operators appear between their operands. Most mathematical
operators are infix operators, such as the multiplication operator in C<$length
* $width>.

X<C<\>; prefix operator>
X<C<~>; prefix operator>
X<C<++>; prefix operator>
X<C<-->; prefix operator>
X<C<+>; prefix operator>
X<C<->; prefix operator>
X<C<!>; prefix operator>
X<C<!!>; prefix operator>

=item * I<Prefix> operators precede their operators. I<Postfix> operators
follow. These operators tend to be unary, such as mathematic negation (C<-$x>),
boolean negation (C<!$y>), and postfix increment (C<$z++>).

X<C<()>; circumfix operator>
X<C<{}>; circumfix operator>
X<C<[]>; circumfix operator>
X<C<//>; circumfix operator>
X<C<``>; circumfix operator>
X<C<''>; circumfix operator>
X<C<"">; circumfix operator>

=item * I<Circumfix> operators surround their operands, as with the anonymous
hash constructor (C<{ ... }>) and quoting operators (C<qq[ ... ]>).

X<C<()>; postcircumfix operator>
X<C<{}>; postcircumfix operator>
X<C<[]>; postcircumfix operator>

=item * I<Postcircumfix> operators follow certain operands and surround others,
as seen in hash and array element access (C<$hash{$x}> and C<$array[$y]>).

=back
