=encoding utf8

=head1 Стойности

Z<values>

X<променливи>
X<стойности>

Структурата на една програма силно зависи от начина, по който присвоявате
към данните си подходящи променливи.

Когато променливите позволяват абстрактно манипулиране на данните, стойностите им
правят програмите конкретни и полезни. Колкото сте по-прецизни със стойностите,
толкова по-добри са вашите програми. Стойностите са данни--името и адреса на
леля ви, разстоянието между вашия офис и игрище за голф на Луната или теглото на
всички бисквити, които сте изяли миналата година. Форматът на данните се следи от
стриктни вътрешни правила. Ефективните програми се нуждаят от ефективни (прости,
бързи, възможно най-компактни и ефикасни) начини за представяне на данните.

=head2 Низове

X<низове>

I<Низът> се състои от текстови или двоични данни, които нямат специално
форматиране или съдържание. Би могло да е вашето име, съдържанието на файл с
изображение или дори цялата ви програма. Низът има смисъл в програмата, само
когато вие му зададете този смисъл.

X<низове; разделители>

Литерален низ се указва чрез заграждането му с чифт кавички. Най-често
използваните I<разделители за низ> са единичните и двойни кавички:

=begin programlisting

    my $name    = B<'Donner Odinson, Bringer of Despair'>;
    my $address = B<"Room 539, Bilskirnir, Valhalla">;

=end programlisting

X<низове; единични кавички>

Символите в I<низ с единични кавички> означават буквално самите себе си, с две
изключения. Слагане на единична кавичка в низ с единични кавички--кавичката се
избягва, като сложите пред нея обратно наклонена черта:

=begin programlisting

    my $reminder = 'DonB<\'>t forget to escape '
                 . 'the single quote!';

=end programlisting

Трябва да избягвате също и обратно наклонена черта в края низа--иначе тя ще
пренебрегне затварящия ограничител и ще се получи синтактична грешка:

=begin programlisting

    my $exception = 'This string ends with a '
                  . 'backslash, not a quote: B<\\>';

=end programlisting

Във всички други случаи обратно наклонена черта може да е част от низ, освен две
последователни обратно наклонени черти, тъй като първата ще пренебрегне втората:


=begin programlisting

    is('Modern B<\> Perl', 'Modern B<\\> Perl',
        'single quotes backslash escaping');

=end programlisting

X<низове; двойни кавички>

I<Низът с двойни кавички> съдържа някои по-специални символи. Например, може да
се кодират иначе невидими знаци, на празно място в низ: 

=begin programlisting

    my $tab       = "B<\t>";
    my $newline   = "B<\n>";
    my $carriage  = "B<\r>";
    my $formfeed  = "B<\f>";
    my $backspace = "B<\b>";

=end programlisting

Това онагледява едно много полезно правило: синтаксисът за деклариране на низ
може да се променя. Можете да означите табулатор в низ с този знак C<\t>, или да
го въведете директно. В юрисдикцията ';)' на Perl и двата низа работят еднакво--
независимо от различното представяне на низа в изходния код.

Декларирането на низ може да премине логически и на нов ред; тези две декларации
са равностойни:

=begin programlisting

    my $escaped = "two\nlines";
    my $literal = "two
    lines";
    is $escaped, $literal, 'equivalent \n and newline';

=end programlisting

Тези редове често са по-лесни за четене от своите празни съответствия.

X<concatenation>
X<strings; concatenation>
X<operators; C<.>>

Низовете в Perl имат променяща се дължина. Като манипулирате и изменяте низ,
Perl съответно променя дължината му. Например, можете да обедините множество
низове в по-голям низ със I<свързващия> оператор C<.>:

=begin programlisting

    my $kitten = 'Choco' . ' ' . 'Spidermonkey';

=end programlisting

Това е също толкова ефикасно, както и ако инициализирате целия низ наведнъж.

X<интерполация>
X<низове; интерполация>

Можете също да I<интерполирате> стойността на скаларна променлива или стойностите
на масив в низ с двойни кавички. Така I<текущото> съдържание на променливата ще
стане част от низа, както при свързване (concatenation):

=begin programlisting

    my $factoid = "B<$name> lives at B<$address>!";

    # equivalent to
    my $factoid = $name . ' lives at ' . $address . '!';

=end programlisting

X<избягване>

Включване на литерал с двойни кавички в низ с двойни кавички чрез I<избягването>
им (това става като пред кавичките се сложи обратна наклонена черта):

=begin programlisting

    my $quote = "\"Ouch,\", he cried.  \"That I<hurt>!\"";

=end programlisting

X<оператори; кавички>
X<C<q>; оператор на единични кавички>
X<оператори; C<q>>
X<C<qq>; оператор на двойни кавички>
X<оператори; C<qq>>

Ако повтарянето на обратно наклонена черта ви дотегне, го заместете с
I<оператор на кавички>, с който може да изберете заместващ разделител на низ.
Операторът C<q> задава единични кавички, а C<qq>--двойни. Символът веднага след
оператора посочва какви са разделителите на низовете. Ако символът е отварящият
от двойка симетрични знаци--като отваряща и затваряща фигурна скоба--то
затварящият символ ще бъде крайният разделител. В противен случай, самият символ
ще бъде и начален и краен разделител.

=begin programlisting

    my $quote     = B<qq{>"Ouch", he said.  "That I<hurt>!"B<}>;
    my $reminder  =  B<q^>Don't escape the single quote!B<^>;
    my $complaint =  B<q{>It's too early to be awake.B<}>;

=end programlisting

X<heredocs>
X<strings; heredocs>

Когато декларирате сложен низ с поредица от досадни избягвания (escapes),
използвайте синтаксиса I<heredoc>, за да отделите един или повече редове от низа:

=begin programlisting

    my $blurb =<<'END_BLURB';

    He looked up. "Time is never on our side, my child.
    Do you see the irony? All they know is change.
    Change is the constant on which they all can agree.
    We instead, born out of time, remain perfect and
    perfectly self-aware. We only suffer change as we
    pursue it. It is against our nature. We rebel
    against that change. Shall we consider them
    greater for it?"
    END_BLURB

=end programlisting

Синтаксисът на C<< <<'END_BLURB' >> има три части. Двойните ъглови скоби
въвеждат heredoc. Вида на кавичките определя на кои правила е подчинен heredoc--
тези на единичните или на двойните кавички. Правилото по подразбиране е на
двойните кавички. C<END_BLURB> е произволен идентификатор, който парсърът на
Perl 5 използва като краен разделител.

Бъдете внимателни. Въпреки въвеждането на нов ред при самото деклариране
на heredoc, завършващият разделител I<трябва> да започва в началото на реда:

=begin programlisting

    sub some_function {
        my $ingredients =<<'END_INGREDIENTS';
        Two eggs
        One cup flour
        Two ounces butter
        One-quarter teaspoon salt
        One cup milk
        One drop vanilla
        Season to taste
    END_INGREDIENTS
    }

=end programlisting

=begin sidebar

Ако идентификаторът започва с празно място, то същото това празно място трябва
да присъства и след крайния разделител. И дори и да прекъснете идентификатора,
Perl 5 I<няма> да премахне съответното празно място от началото на всеки ред на
heredoc.

=end sidebar

Използването на низ в не-низов контекст ще предизвика третиране на данните
(L<coercion>).

=head2 Уникод и низ

Z<unicode>
X<Unicode>

I<Уникод> е система за представяне на символи от всички писмени езици. Повечето
текстове на английски език ползват набор от само 127 символа (които се съхраняват
в седем бита и пасват удобно в осем-битови байта). Но е наивно (naE<iuml>ve) да
се вярва, че някой ден няма да ви потрябва умлаут (umlaut)N<Мутация на гласните
в германските езици; преглас; двойни точки( ¨ ) над гласна, бел.прев.>

Низовете в Perl 5 могат да представят всеки от два отделни, но свързани типа
данни:

X<codepoint>

=over 4

=item Последователност на символите в Уникод

Всеки символ има I<codepoint> (позиция), уникален идентифициращ номер в набора
от символи на Уникод.

=item Последователност от октети (набор от осем бита)

X<октет>

Двоичните данни представляват последователност от I<октети>--8 битови числа,
всяко от които представя число между 0 и 255.

=back

=begin tip Words Matter

Защо I<октет>, а не I<байт>? Ако приемем, че един символ отговаря на един байт,
това би довело до безброй неприятности с Уникод. Затова разделяме идеята за
съхранение на символа от самото представяне на символа.

=end tip

Уникод низовете и двоичните низове си приличат. Всеки от тях има C<дължина()>.
Всеки поддържа стандартните операции за низ, като свързване (concatenation),
????splicing???? и обработка на регулярни изрази. Всеки низ, който не е изцяло от двоични
данни, е низ от текстови данни, и трябва да е поредица от Уникод символи.

Обаче, операционната ви система представя данните (от диска, от потребителите,
или извън мрежата) като последователност от октети. Поради това Perl не знае дали
данните са файл с изображение, текстов документ или нещо друго. По подразбиране,
Perl третира всички входящи данни като поредици от октети.  Вие трябва да добавите
специфично значение на тези данни.

=head3 Кодиране на символите

X<encoding>
X<Unicode; encoding>
X<UTF-8>
X<ASCII>
X<Latin-1>

Уникод низ е поредица от октети, които съответстват на поредица от символи.
I<Кодирането в Уникод> установява съответствия между поредиците от октети и
символите. Някои кодировки, като UTF-8, могат да кодират всички символи от
Набора със символи на Уникод. Други кодировки представляват подмножество от
Уникод символи. Например, ASCII кодира обикновен текст на английски без символи
с ударения, докато Latin-1 може да представи повечето езици, ползващи латинската
азбука.

За да избегнете възможните проблеми с Уникод, винаги декодирайте към или от
подходящата кодировка на входа и изхода на вашата програма.

=begin tip Развиващ се стандарт

Perl 5.12 поддържа стандарта Уникод 5.2, докато Perl 5.14 поддържа Уникод 6.0.
Ако ви интересуват разликите между версиите на Уникод, може да видите на този
адрес: U<http://unicode.org/versions/>.

=end tip

=head3 Уникод във вашите файлови манипулатори

X<C<open>>
X<builtins; C<open>>
X<IO layers>

Когато кажете на Perl, че даден файлов манипулатор (L<files>) работи с кодиран
текст, Perl автоматично ще преобразува входящите октети в Уникод низове. Това
става, като добавите IO слой към метода на вградената функция C<open>. I<IO слоят>
обгражда входа или изхода и преобразува данните. В този случай слоят C<:utf8>
декодира UTF-8 данните:

=begin programlisting

    use autodie;

    open my $fh, '<:utf8', $textfile;

    my $unicode_string = <$fh>;

=end programlisting

X<C<binmode>>
X<builtins; C<binmode>>

Можете също да промените файлов манипулатор с C<binmode>, независимо на входа
или на изхода.

=begin programlisting

    binmode $fh, ':utf8';
    my $unicode_string = <$fh>;

    binmode STDOUT, ':utf8';
    say $unicode_string;

=end programlisting

Извън режима C<utf8>, отпечатването на Уникод низове към файлов манипулатор ще
доведе до предупреждение за неточен символ (C<Wide character in %s>), защото
файла съдържа октети, а не Уникод символи.

=head3 Уникод във вашите данни

X<C<Encode>>
X<C<decode()>>
X<C<encode()>>

The core module C<Encode> provides a function named C<decode()> to convert a
scalar containing data to a Unicode string. The corresponding C<encode()>
function converts from Perl's internal encoding to the desired output encoding:

=begin programlisting

    my $from_utf8 = decode('utf8', $data);
    my $to_latin1 = encode('iso-8859-1', $string);

=end programlisting

=head3 Unicode in Your Programs

X<pragmas; C<utf8>>
X<C<utf8> pragma>
X<encoding>

You may include Unicode characters in your programs in three ways. The easiest
is to use the C<utf8> pragma (L<pragmas>), which tells the Perl parser to
interpret the rest of the source code file with the UTF-8 encoding. This allows
you to use Unicode characters in strings and identifiers:

=begin programlisting

    use utf8;

    sub E<pound>_to_E<yen> { ... }

    my $yen = E<pound>_to_E<yen>('1000E<pound>');

=end programlisting

To I<write> this code, your text editor must understand UTF-8 and you must save
the file with the appropriate encoding.

X<strings; C<\x{}>>
X<C<\x{}>; escape sequence for character encodings>

Within double-quoted strings, you may use the Unicode escape sequence to
represent character encodings. The syntax C<\x{}> represents a single
character; place the hex form of the character's Unicode number within the
curly brackets:

=begin programlisting

    my $escaped_thorn = "\x{00FE}";

=end programlisting

X<C<charnames> pragma>
X<pragmas; C<charnames>>
X<strings; C<\N{}>>
X<C<\N{}>; escape sequence for named character encodings>

Some Unicode characters have names, and these names are often clearer to read
than Unicode numbers. Use the C<charnames> pragma to enable them and the
C<\N{}> escape to refer to them:

=begin programlisting

    use charnames ':full';
    use Test::More tests => 1;

    my $escaped_thorn = "\x{00FE}";
    my $named_thorn   = "\N{LATIN SMALL LETTER THORN}";

    is $escaped_thorn, $named_thorn,
        'Thorn equivalence check';

=end programlisting

You may use the C<\x{}> and C<\N{}> forms within regular expressions as well as
anywhere else you may legitimately use a string or a character.

=head3 Implicit Conversion

Most Unicode problems in Perl arise from the fact that a string could be either
a sequence of octets or a sequence of characters. Perl allows you to combine
these types through the use of implicit conversions. When these conversions are
wrong, they're rarely I<obviously> wrong.

When Perl concatenates a sequences of octets with a sequence of Unicode
characters, it implicitly decodes the octet sequence using the Latin-1
encoding. The resulting string will contain Unicode characters. When you print
Unicode characters, Perl will encode the string using UTF-8, because Latin-1
cannot represent the entire set of Unicode characters--Latin-1 is a subset of
UTF-8.

This asymmetry can lead to Unicode strings encoded as UTF-8 for output and
decoded as Latin-1 when input.

Worse yet, when the text contains only English characters with no accents, the
bug hides--because both encodings have the same representation for every
character.

=begin programlisting

    my $hello    = "Hello, ";
    my $greeting = $hello . $name;

=end programlisting

If C<$name> contains an English name such as I<Alice> you will never notice any
problem, because the Latin-1 representation is the same as the UTF-8
representation. If C<$name> contains a name such as I<JosE<eacute>>, C<$name>
can contain several possible values:

=over 4

=item *

C<$name> contains four Unicode characters.

=item *

C<$name> contains four Latin-1 octets representing four Unicode characters.

=item *

C<$name> contains five UTF-8 octets representing four Unicode characters.

=back

The string literal has several possible scenarios:

=over 4

=item * It is an ASCII string literal and contains octets.

=begin programlisting

    my $hello = "Hello, ";

=end programlisting

=item * It is a Latin-1 string literal with no explicit encoding and contains
octets.

=begin programlisting

    my $hello = "E<iexcl>Hola, ";

=end programlisting

The string literal contains octets.

=item * It is a non-ASCII string literal with the C<utf8> or C<encoding> pragma
in effect and contains Unicode characters.

=begin programlisting

    use utf8;
    my $hello = "KuirabE<aacute>, ";

=end programlisting

=back

If both C<$hello> and C<$name> are Unicode strings, the concatenation will
produce another Unicode string.

If both strings are octet streams, Perl will concatenate them into a new octet
string. If both values are octets of the same encoding--both Latin-1, for
example, the concatenation will work correctly. If the octets do not share an
encoding, for example a concatenation appending UTF-8 data to Latin-1 data, then the
resulting sequence of octets makes sense in I<neither> encoding. This could happen
if the user entered a name as UTF-8 data and the greeting were a Latin-1 string
literal, but the program decoded neither.

If only one of the values is a Unicode string, Perl will decode the other as
Latin-1 data. If this is not the correct encoding, the resulting Unicode
characters will be wrong. For example, if the user input were UTF-8 data and
the string literal were a Unicode string, the name would be incorrectly decoded
into five Unicode characters to form I<JosE<Atilde>E<copy>> (I<sic>) instead of
I<JosE<eacute>> because the UTF-8 data means something else when decoded as
Latin-1 data.

See C<perldoc perluniintro> for a far more detailed explanation of Unicode,
encodings, and how to manage incoming and outgoing data in a Unicode worldN<For
I<far> more detail about managing Unicode effectively throughout your programs,
see Tom Christiansen's answer to "Why does Modern Perl avoid UTF-8 by default?"
U<http://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default/6163129#6163129>>.

=begin sidebar

X<C<unicode_strings>>
X<pragmas; C<feature>>

Perl 5.12 added a feature, C<unicode_strings>, which enables Unicode
semantics for all string operations within its scope. Perl 5.14 improved this
feature; if you work with Unicode in Perl, it's worth upgrading to at least
Perl 5.14.

=end sidebar

=head2 Numbers

X<numbers>
X<integers>
X<floating-point values>

Perl supports numbers as both integers and floating-point values. You may
represent them with scientific notation as well as in binary, octal, and
hexadecimal forms:

=begin programlisting

    my $integer   = 42;
    my $float     = 0.007;
    my $sci_float = 1.02e14;
    my $binary    = B<0b>101010;
    my $octal     = B<0>52;
    my $hex       = B<0x>20;

=end programlisting

X<numbers; representation prefixes>
X<C<0b>>
X<C<0>>
X<C<0x>>

The emboldened characters are the numeric prefixes for binary, octal, and hex
notation respectively. Be aware that a leading zero on an integer I<always>
indicates octal mode.

X<numbers; underscore separator>
X<underscore>

=begin tip When 1.99 + 1.99 is 4

Even though you can write floating-point values explicitly in Perl 5 with
perfect accuracy, Perl 5 stores them internally in a binary format. This
representation is sometimes imprecise in specific ways; consult C<perldoc
perlnumber> for more details.

=end tip

You may not use commas to separate thousands in numeric literals, lest the
parser interpret the commas as comma operators. Instead, use underscores within
the number. The parser will treat them as invisible characters; your readers
may not. These are equivalent:

=begin programlisting

    my $billion = 1000000000;
    my $billion = 1_000_000_000;
    my $billion = 10_0_00_00_0_0_0;

=end programlisting

Consider the most readable alternative.

X<C<Scalar::Util>>
X<C<looks_like_number()>>

Because of coercion (L<coercion>), Perl programmers rarely have to worry about
converting text read from outside the program to numbers. Perl will treat
anything which looks like a number I<as> a number in numeric contexts. In the
rare circumstances where you need to know if something looks like a number to
Perl, use the C<looks_like_number> function from the core module
C<Scalar::Util>. This function returns a true value if Perl will consider the
given argument numeric.

X<C<Regexp::Common>>

The C<Regexp::Common> module from the CPAN provides several well-tested regular
expressions to identify more specific valid I<types> (whole number, integer,
floating-point value) of numeric values.

=head2 Undef

X<C<undef>>

Perl 5's C<undef> value represents an unassigned, undefined, and unknown value.
Declared but undefined scalar variables contain C<undef>:

=begin programlisting

    my $name = undef;   # unnecessary assignment
    my $rank;           # also contains undef

=end programlisting

X<C<undef>; coercions>

C<undef> evaluates to false in boolean context. Evaluating C<undef> in a string
context--such as interpolating it into a string--produces an C<uninitialized
value> warning:

=begin programlisting

    my $undefined;
    my $defined = $undefined . '... and so forth';

=end programlisting

... produces:

=begin screen

    Use of uninitialized value $undefined in
    concatenation (.) or string...

=end screen

X<builtins; C<defined>>

The C<defined> builtin returns a true value if its operand evaluates to a
defined value (anything other than C<undef>):

=begin programlisting

    my $status = 'suffering from a cold';

    say B<defined> $status;  # 1, which is a true value
    say B<defined> undef;    # empty string; a false value

=end programlisting

=head2 The Empty List

X<empty list>
X<C<()>; empty list>

When used on the right-hand side of an assignment, the C<()> construct
represents an empty list. In scalar context, this evaluates to C<undef>. In
list context, it is an empty list. When used on the left-hand side of an
assignment, the C<()> construct imposes list context. To count the number of
elements returned from an expression in list context without using a temporary
variable, use the idiom (L<idioms>):

=begin programlisting

    my $count = B<()> = get_all_clown_hats();

=end programlisting

Because of the right associativity (L<associativity>) of the assignment
operator, Perl first evaluates the second assignment by calling
C<get_all_clown_hats()> in list context. This produces a list.

Assignment to the empty list throws away all of the values of the list, but
that assignment takes place in scalar context, which evaluates to the number of
items on the right hand side of the assignment. As a result, C<$count> contains
the number of elements in the list returned from C<get_all_clown_hats()>.

If you find that concept confusing right now, fear not. As you understand how
Perl's fundamental design features fit together in practice, it will make more
sense.

=head2 Lists

X<lists>

A list is a comma-separated group of one or more expressions. Lists may occur
verbatim in source code as values:

=begin programlisting

    my @first_fibs = (1, 1, 2, 3, 5, 8, 13, 21);

=end programlisting

... as targets of assignments:

=begin programlisting

    my ($package, $filename, $line) = caller();

=end programlisting

... or as lists of expressions:

=begin programlisting

    say name(), ' => ', age();

=end programlisting

Parentheses do not I<create> lists. The comma operator creates lists. Where
present, the parentheses in these examples group expressions to change their
I<precedence> (L<precedence>).

X<operators; range>
X<operators; C<..>>
X<C<..>; range operator>

Use the range operator to create lists of literals in a compact form:

=begin programlisting

    my @chars = 'a' .. 'z';
    my @count = 13 .. 27;

=end programlisting

X<operators; C<qw()>>
X<C<qw()>; quote words operator>

Use the C<qw()> operator to split a literal string on whitespace to produce a
list of strings:

=begin programlisting

    my @stooges = qw( Larry Curly Moe Shemp Joey Kenny );

=end programlisting

=begin tip No Comment Please

Perl will emit a warning if a C<qw()> contains a comma or the comment character
(C<#>), because not only are such characters rare in a C<qw()>, their presence
usually indicates an oversight.

=end tip

Lists can (and often do) occur as the results of expressions, but these lists
do not appear literally in source code.

Lists and arrays are not interchangeable in Perl. Lists are values. Arrays are
containers. You may store a list in an array and you may coerce an array to a
list, but they are separate entities. For example, indexing into a list always
occurs in list context. Indexing into an array can occur in scalar context (for
a single element) or list context (for a slice):

=begin programlisting

    # don't worry about the details right now
    sub context
    {
        my $context = wantarray();

        say defined $context
             ? $context
                 ? 'list'
                 : 'scalar'
             : 'void';
        return 0;
    }

    my @list_slice  = (1, 2, 3)[context()];
    my @array_slice = @list_slice[context()];
    my $array_index = $array_slice[context()];

    say context(); # list context
    context();     # void context

=end programlisting
